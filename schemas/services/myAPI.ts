/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * My API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/vue-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query'
import {
  computed,
  unref
} from 'vue'
import type {
  MaybeRef
} from 'vue'
import type {
  Event,
  EventLog,
  EventLogDistinctResult,
  EventLogPatchRequest,
  EventLogPostRequest,
  EventLogResult,
  GetApiBabyId200,
  GetApiBucketName200,
  GetApiEventLogDistinctParams,
  GetApiEventLogParams,
  GetApiMoment200,
  GetApiMomentParams,
  InternalServerError,
  MomentPostRequest,
  MomentPutRequest,
  PatchApiBaby200,
  PatchApiBabyBody,
  PatchApiEvent200,
  PatchApiEventBody,
  PostApiBaby200,
  PostApiBabyBody,
  PostApiBucket200,
  PostApiBucketBody,
  PostApiCompressBody,
  PostApiEventBody,
  PostApiHelloGeminiProBody,
  PostApiHelloPhotonBody,
  PostApiMoment200,
  PostApiUpload200,
  PostApiUploadBody,
  PutApiMoment200
} from '../model'
import { customInstance } from '../../api/mutator/custom-instance';
import type { ErrorType } from '../../api/mutator/custom-instance';



export const deleteApiEventLogId = (
    id: MaybeRef<string>,
 ) => {
      id = unref(id);
      
      return customInstance<void>(
      {url: `/api/event-log/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiEventLogIdMutationOptions = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiEventLogId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiEventLogId>>, TError,{id: string}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiEventLogId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiEventLogId(id,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiEventLogIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiEventLogId>>>
    
    export type DeleteApiEventLogIdMutationError = ErrorType<InternalServerError>

    export const useDeleteApiEventLogId = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiEventLogId>>, TError,{id: string}, TContext>, }
) => {

      const mutationOptions = getDeleteApiEventLogIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiEventLogDistinct = (
    params?: MaybeRef<GetApiEventLogDistinctParams>,
 signal?: AbortSignal
) => {
      params = unref(params);
      
      return customInstance<EventLogDistinctResult[]>(
      {url: `/api/event-log/distinct`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

export const getGetApiEventLogDistinctQueryKey = (params?: MaybeRef<GetApiEventLogDistinctParams>,) => {
    return ['api','event-log','distinct', ...(params ? [params]: [])] as const;
    }

    
export const getGetApiEventLogDistinctQueryOptions = <TData = Awaited<ReturnType<typeof getApiEventLogDistinct>>, TError = ErrorType<InternalServerError>>(params?: MaybeRef<GetApiEventLogDistinctParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEventLogDistinct>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getGetApiEventLogDistinctQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEventLogDistinct>>> = ({ signal }) => getApiEventLogDistinct(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiEventLogDistinct>>, TError, TData> 
}

export type GetApiEventLogDistinctQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEventLogDistinct>>>
export type GetApiEventLogDistinctQueryError = ErrorType<InternalServerError>

export const useGetApiEventLogDistinct = <TData = Awaited<ReturnType<typeof getApiEventLogDistinct>>, TError = ErrorType<InternalServerError>>(
 params?: MaybeRef<GetApiEventLogDistinctParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEventLogDistinct>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiEventLogDistinctQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey as QueryKey;

  return query;
}




export const getApiEventLog = (
    params?: MaybeRef<GetApiEventLogParams>,
 signal?: AbortSignal
) => {
      params = unref(params);
      
      return customInstance<EventLogResult[]>(
      {url: `/api/event-log`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

export const getGetApiEventLogQueryKey = (params?: MaybeRef<GetApiEventLogParams>,) => {
    return ['api','event-log', ...(params ? [params]: [])] as const;
    }

    
export const getGetApiEventLogQueryOptions = <TData = Awaited<ReturnType<typeof getApiEventLog>>, TError = ErrorType<InternalServerError>>(params?: MaybeRef<GetApiEventLogParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEventLog>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getGetApiEventLogQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEventLog>>> = ({ signal }) => getApiEventLog(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiEventLog>>, TError, TData> 
}

export type GetApiEventLogQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEventLog>>>
export type GetApiEventLogQueryError = ErrorType<InternalServerError>

export const useGetApiEventLog = <TData = Awaited<ReturnType<typeof getApiEventLog>>, TError = ErrorType<InternalServerError>>(
 params?: MaybeRef<GetApiEventLogParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEventLog>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiEventLogQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey as QueryKey;

  return query;
}




export const patchApiEventLog = (
    eventLogPatchRequest: MaybeRef<EventLogPatchRequest>,
 ) => {
      eventLogPatchRequest = unref(eventLogPatchRequest);
      
      return customInstance<EventLog>(
      {url: `/api/event-log`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: eventLogPatchRequest
    },
      );
    }
  


export const getPatchApiEventLogMutationOptions = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiEventLog>>, TError,{data: EventLogPatchRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchApiEventLog>>, TError,{data: EventLogPatchRequest}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiEventLog>>, {data: EventLogPatchRequest}> = (props) => {
          const {data} = props ?? {};

          return  patchApiEventLog(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PatchApiEventLogMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiEventLog>>>
    export type PatchApiEventLogMutationBody = EventLogPatchRequest
    export type PatchApiEventLogMutationError = ErrorType<InternalServerError>

    export const usePatchApiEventLog = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiEventLog>>, TError,{data: EventLogPatchRequest}, TContext>, }
) => {

      const mutationOptions = getPatchApiEventLogMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiEventLog = (
    eventLogPostRequest: MaybeRef<EventLogPostRequest>,
 ) => {
      eventLogPostRequest = unref(eventLogPostRequest);
      
      return customInstance<EventLog>(
      {url: `/api/event-log`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: eventLogPostRequest
    },
      );
    }
  


export const getPostApiEventLogMutationOptions = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEventLog>>, TError,{data: EventLogPostRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiEventLog>>, TError,{data: EventLogPostRequest}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiEventLog>>, {data: EventLogPostRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiEventLog(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiEventLogMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEventLog>>>
    export type PostApiEventLogMutationBody = EventLogPostRequest
    export type PostApiEventLogMutationError = ErrorType<InternalServerError>

    export const usePostApiEventLog = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEventLog>>, TError,{data: EventLogPostRequest}, TContext>, }
) => {

      const mutationOptions = getPostApiEventLogMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiEvent = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<Event[]>(
      {url: `/api/event`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiEventQueryKey = () => {
    return ['api','event'] as const;
    }

    
export const getGetApiEventQueryOptions = <TData = Awaited<ReturnType<typeof getApiEvent>>, TError = ErrorType<InternalServerError>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEvent>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getGetApiEventQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEvent>>> = ({ signal }) => getApiEvent(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiEvent>>, TError, TData> 
}

export type GetApiEventQueryResult = NonNullable<Awaited<ReturnType<typeof getApiEvent>>>
export type GetApiEventQueryError = ErrorType<InternalServerError>

export const useGetApiEvent = <TData = Awaited<ReturnType<typeof getApiEvent>>, TError = ErrorType<InternalServerError>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiEvent>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiEventQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey as QueryKey;

  return query;
}




export const patchApiEvent = (
    patchApiEventBody: MaybeRef<PatchApiEventBody>,
 ) => {
      patchApiEventBody = unref(patchApiEventBody);
      
      return customInstance<PatchApiEvent200>(
      {url: `/api/event`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchApiEventBody
    },
      );
    }
  


export const getPatchApiEventMutationOptions = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiEvent>>, TError,{data: PatchApiEventBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchApiEvent>>, TError,{data: PatchApiEventBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiEvent>>, {data: PatchApiEventBody}> = (props) => {
          const {data} = props ?? {};

          return  patchApiEvent(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PatchApiEventMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiEvent>>>
    export type PatchApiEventMutationBody = PatchApiEventBody
    export type PatchApiEventMutationError = ErrorType<InternalServerError>

    export const usePatchApiEvent = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiEvent>>, TError,{data: PatchApiEventBody}, TContext>, }
) => {

      const mutationOptions = getPatchApiEventMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiEvent = (
    postApiEventBody: MaybeRef<PostApiEventBody>,
 ) => {
      postApiEventBody = unref(postApiEventBody);
      
      return customInstance<Event[]>(
      {url: `/api/event`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiEventBody
    },
      );
    }
  


export const getPostApiEventMutationOptions = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEvent>>, TError,{data: PostApiEventBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiEvent>>, TError,{data: PostApiEventBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiEvent>>, {data: PostApiEventBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiEvent(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiEventMutationResult = NonNullable<Awaited<ReturnType<typeof postApiEvent>>>
    export type PostApiEventMutationBody = PostApiEventBody
    export type PostApiEventMutationError = ErrorType<InternalServerError>

    export const usePostApiEvent = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiEvent>>, TError,{data: PostApiEventBody}, TContext>, }
) => {

      const mutationOptions = getPostApiEventMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiBucketName = (
    name: MaybeRef<string>,
 signal?: AbortSignal
) => {
      name = unref(name);
      
      return customInstance<GetApiBucketName200>(
      {url: `/api/bucket/${name}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiBucketNameQueryKey = (name: MaybeRef<string>,) => {
    return ['api','bucket',name] as const;
    }

    
export const getGetApiBucketNameQueryOptions = <TData = Awaited<ReturnType<typeof getApiBucketName>>, TError = ErrorType<InternalServerError>>(name: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBucketName>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getGetApiBucketNameQueryKey(name);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiBucketName>>> = ({ signal }) => getApiBucketName(name, signal);

      

      

   return  { queryKey, queryFn, enabled: computed(() => !!(unref(name))), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiBucketName>>, TError, TData> 
}

export type GetApiBucketNameQueryResult = NonNullable<Awaited<ReturnType<typeof getApiBucketName>>>
export type GetApiBucketNameQueryError = ErrorType<InternalServerError>

export const useGetApiBucketName = <TData = Awaited<ReturnType<typeof getApiBucketName>>, TError = ErrorType<InternalServerError>>(
 name: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBucketName>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiBucketNameQueryOptions(name,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey as QueryKey;

  return query;
}




export const postApiBucket = (
    postApiBucketBody: MaybeRef<PostApiBucketBody>,
 ) => {
      postApiBucketBody = unref(postApiBucketBody);
      
      return customInstance<PostApiBucket200>(
      {url: `/api/bucket`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiBucketBody
    },
      );
    }
  


export const getPostApiBucketMutationOptions = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiBucket>>, TError,{data: PostApiBucketBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiBucket>>, TError,{data: PostApiBucketBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiBucket>>, {data: PostApiBucketBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiBucket(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiBucketMutationResult = NonNullable<Awaited<ReturnType<typeof postApiBucket>>>
    export type PostApiBucketMutationBody = PostApiBucketBody
    export type PostApiBucketMutationError = ErrorType<InternalServerError>

    export const usePostApiBucket = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiBucket>>, TError,{data: PostApiBucketBody}, TContext>, }
) => {

      const mutationOptions = getPostApiBucketMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiUpload = (
    postApiUploadBody: MaybeRef<PostApiUploadBody>,
 ) => {
      postApiUploadBody = unref(postApiUploadBody);
      const formData = new FormData();
if(postApiUploadBody.file !== undefined) {
 formData.append('file', postApiUploadBody.file)
 }
if(postApiUploadBody.bucketName !== undefined) {
 formData.append('bucketName', postApiUploadBody.bucketName)
 }

      return customInstance<PostApiUpload200>(
      {url: `/api/upload`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      );
    }
  


export const getPostApiUploadMutationOptions = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUpload>>, TError,{data: PostApiUploadBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiUpload>>, TError,{data: PostApiUploadBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUpload>>, {data: PostApiUploadBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiUpload(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUpload>>>
    export type PostApiUploadMutationBody = PostApiUploadBody
    export type PostApiUploadMutationError = ErrorType<InternalServerError>

    export const usePostApiUpload = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUpload>>, TError,{data: PostApiUploadBody}, TContext>, }
) => {

      const mutationOptions = getPostApiUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiCompress = (
    postApiCompressBody: MaybeRef<PostApiCompressBody>,
 ) => {
      postApiCompressBody = unref(postApiCompressBody);
      const formData = new FormData();
if(postApiCompressBody.file !== undefined) {
 formData.append('file', postApiCompressBody.file)
 }

      return customInstance<void>(
      {url: `/api/compress`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      );
    }
  


export const getPostApiCompressMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCompress>>, TError,{data: PostApiCompressBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiCompress>>, TError,{data: PostApiCompressBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiCompress>>, {data: PostApiCompressBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiCompress(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiCompressMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCompress>>>
    export type PostApiCompressMutationBody = PostApiCompressBody
    export type PostApiCompressMutationError = ErrorType<unknown>

    export const usePostApiCompress = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCompress>>, TError,{data: PostApiCompressBody}, TContext>, }
) => {

      const mutationOptions = getPostApiCompressMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiCompressOld = (
    
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/compress-old`, method: 'POST'
    },
      );
    }
  


export const getPostApiCompressOldMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCompressOld>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiCompressOld>>, TError,void, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiCompressOld>>, void> = () => {
          

          return  postApiCompressOld()
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiCompressOldMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCompressOld>>>
    
    export type PostApiCompressOldMutationError = ErrorType<unknown>

    export const usePostApiCompressOld = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCompressOld>>, TError,void, TContext>, }
) => {

      const mutationOptions = getPostApiCompressOldMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiMoment = (
    momentPostRequest: MaybeRef<MomentPostRequest>,
 ) => {
      momentPostRequest = unref(momentPostRequest);
      
      return customInstance<PostApiMoment200>(
      {url: `/api/moment`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: momentPostRequest
    },
      );
    }
  


export const getPostApiMomentMutationOptions = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiMoment>>, TError,{data: MomentPostRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiMoment>>, TError,{data: MomentPostRequest}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiMoment>>, {data: MomentPostRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiMoment(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiMomentMutationResult = NonNullable<Awaited<ReturnType<typeof postApiMoment>>>
    export type PostApiMomentMutationBody = MomentPostRequest
    export type PostApiMomentMutationError = ErrorType<InternalServerError>

    export const usePostApiMoment = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiMoment>>, TError,{data: MomentPostRequest}, TContext>, }
) => {

      const mutationOptions = getPostApiMomentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiMoment = (
    params?: MaybeRef<GetApiMomentParams>,
 signal?: AbortSignal
) => {
      params = unref(params);
      
      return customInstance<GetApiMoment200>(
      {url: `/api/moment`, method: 'GET',
        params: unref(params), signal
    },
      );
    }
  

export const getGetApiMomentQueryKey = (params?: MaybeRef<GetApiMomentParams>,) => {
    return ['api','moment', ...(params ? [params]: [])] as const;
    }

    
export const getGetApiMomentQueryOptions = <TData = Awaited<ReturnType<typeof getApiMoment>>, TError = ErrorType<InternalServerError>>(params?: MaybeRef<GetApiMomentParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMoment>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getGetApiMomentQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiMoment>>> = ({ signal }) => getApiMoment(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiMoment>>, TError, TData> 
}

export type GetApiMomentQueryResult = NonNullable<Awaited<ReturnType<typeof getApiMoment>>>
export type GetApiMomentQueryError = ErrorType<InternalServerError>

export const useGetApiMoment = <TData = Awaited<ReturnType<typeof getApiMoment>>, TError = ErrorType<InternalServerError>>(
 params?: MaybeRef<GetApiMomentParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiMoment>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiMomentQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey as QueryKey;

  return query;
}




export const putApiMoment = (
    momentPutRequest: MaybeRef<MomentPutRequest>,
 ) => {
      momentPutRequest = unref(momentPutRequest);
      
      return customInstance<PutApiMoment200>(
      {url: `/api/moment`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: momentPutRequest
    },
      );
    }
  


export const getPutApiMomentMutationOptions = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiMoment>>, TError,{data: MomentPutRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiMoment>>, TError,{data: MomentPutRequest}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiMoment>>, {data: MomentPutRequest}> = (props) => {
          const {data} = props ?? {};

          return  putApiMoment(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiMomentMutationResult = NonNullable<Awaited<ReturnType<typeof putApiMoment>>>
    export type PutApiMomentMutationBody = MomentPutRequest
    export type PutApiMomentMutationError = ErrorType<InternalServerError>

    export const usePutApiMoment = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiMoment>>, TError,{data: MomentPutRequest}, TContext>, }
) => {

      const mutationOptions = getPutApiMomentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiMomentId = (
    id: MaybeRef<string>,
 ) => {
      id = unref(id);
      
      return customInstance<void>(
      {url: `/api/moment/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiMomentIdMutationOptions = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiMomentId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiMomentId>>, TError,{id: string}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiMomentId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiMomentId(id,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiMomentIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiMomentId>>>
    
    export type DeleteApiMomentIdMutationError = ErrorType<InternalServerError>

    export const useDeleteApiMomentId = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiMomentId>>, TError,{id: string}, TContext>, }
) => {

      const mutationOptions = getDeleteApiMomentIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiBaby = (
    postApiBabyBody: MaybeRef<PostApiBabyBody>,
 ) => {
      postApiBabyBody = unref(postApiBabyBody);
      
      return customInstance<PostApiBaby200>(
      {url: `/api/baby`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiBabyBody
    },
      );
    }
  


export const getPostApiBabyMutationOptions = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiBaby>>, TError,{data: PostApiBabyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiBaby>>, TError,{data: PostApiBabyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiBaby>>, {data: PostApiBabyBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiBaby(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiBabyMutationResult = NonNullable<Awaited<ReturnType<typeof postApiBaby>>>
    export type PostApiBabyMutationBody = PostApiBabyBody
    export type PostApiBabyMutationError = ErrorType<InternalServerError>

    export const usePostApiBaby = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiBaby>>, TError,{data: PostApiBabyBody}, TContext>, }
) => {

      const mutationOptions = getPostApiBabyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const patchApiBaby = (
    patchApiBabyBody: MaybeRef<PatchApiBabyBody>,
 ) => {
      patchApiBabyBody = unref(patchApiBabyBody);
      
      return customInstance<PatchApiBaby200>(
      {url: `/api/baby`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchApiBabyBody
    },
      );
    }
  


export const getPatchApiBabyMutationOptions = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiBaby>>, TError,{data: PatchApiBabyBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchApiBaby>>, TError,{data: PatchApiBabyBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiBaby>>, {data: PatchApiBabyBody}> = (props) => {
          const {data} = props ?? {};

          return  patchApiBaby(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PatchApiBabyMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiBaby>>>
    export type PatchApiBabyMutationBody = PatchApiBabyBody
    export type PatchApiBabyMutationError = ErrorType<InternalServerError>

    export const usePatchApiBaby = <TError = ErrorType<InternalServerError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiBaby>>, TError,{data: PatchApiBabyBody}, TContext>, }
) => {

      const mutationOptions = getPatchApiBabyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiBabyId = (
    id: MaybeRef<string>,
 signal?: AbortSignal
) => {
      id = unref(id);
      
      return customInstance<GetApiBabyId200>(
      {url: `/api/baby/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiBabyIdQueryKey = (id: MaybeRef<string>,) => {
    return ['api','baby',id] as const;
    }

    
export const getGetApiBabyIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiBabyId>>, TError = ErrorType<InternalServerError>>(id: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBabyId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getGetApiBabyIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiBabyId>>> = ({ signal }) => getApiBabyId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: computed(() => !!(unref(id))), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiBabyId>>, TError, TData> 
}

export type GetApiBabyIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiBabyId>>>
export type GetApiBabyIdQueryError = ErrorType<InternalServerError>

export const useGetApiBabyId = <TData = Awaited<ReturnType<typeof getApiBabyId>>, TError = ErrorType<InternalServerError>>(
 id: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBabyId>>, TError, TData>>, }

  ): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiBabyIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey as QueryKey;

  return query;
}




export const postApiHelloGeminiPro = (
    postApiHelloGeminiProBody: MaybeRef<PostApiHelloGeminiProBody>,
 ) => {
      postApiHelloGeminiProBody = unref(postApiHelloGeminiProBody);
      
      return customInstance<void>(
      {url: `/api/hello/gemini-pro`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiHelloGeminiProBody
    },
      );
    }
  


export const getPostApiHelloGeminiProMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiHelloGeminiPro>>, TError,{data: PostApiHelloGeminiProBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiHelloGeminiPro>>, TError,{data: PostApiHelloGeminiProBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiHelloGeminiPro>>, {data: PostApiHelloGeminiProBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiHelloGeminiPro(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiHelloGeminiProMutationResult = NonNullable<Awaited<ReturnType<typeof postApiHelloGeminiPro>>>
    export type PostApiHelloGeminiProMutationBody = PostApiHelloGeminiProBody
    export type PostApiHelloGeminiProMutationError = ErrorType<unknown>

    export const usePostApiHelloGeminiPro = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiHelloGeminiPro>>, TError,{data: PostApiHelloGeminiProBody}, TContext>, }
) => {

      const mutationOptions = getPostApiHelloGeminiProMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiHelloPhoton = (
    postApiHelloPhotonBody: MaybeRef<PostApiHelloPhotonBody>,
 ) => {
      postApiHelloPhotonBody = unref(postApiHelloPhotonBody);
      const formData = new FormData();
if(postApiHelloPhotonBody.file !== undefined) {
 formData.append('file', postApiHelloPhotonBody.file)
 }

      return customInstance<void>(
      {url: `/api/hello/photon`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      );
    }
  


export const getPostApiHelloPhotonMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiHelloPhoton>>, TError,{data: PostApiHelloPhotonBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiHelloPhoton>>, TError,{data: PostApiHelloPhotonBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiHelloPhoton>>, {data: PostApiHelloPhotonBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiHelloPhoton(data,)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiHelloPhotonMutationResult = NonNullable<Awaited<ReturnType<typeof postApiHelloPhoton>>>
    export type PostApiHelloPhotonMutationBody = PostApiHelloPhotonBody
    export type PostApiHelloPhotonMutationError = ErrorType<unknown>

    export const usePostApiHelloPhoton = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiHelloPhoton>>, TError,{data: PostApiHelloPhotonBody}, TContext>, }
) => {

      const mutationOptions = getPostApiHelloPhotonMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
